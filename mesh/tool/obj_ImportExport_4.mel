/*	OBJ Import and Export.	v4, January 2007	- added folder browse button		by Andrew Butler - knurbs@gmail.com					http://www.andrewbutler.com.au	Description:		Exports and/or imports your finalised poly models to provide you with a clean,		input-free, history-less mesh ready for rigging using Maya's ObjExport plugin.				June version alows you to export and save the geometry to disk.		Using 'Combine selected' and 'Export to disk' - Specify the directory and filename in the text field. Result is one piece of geometry.		Using 'Individually' and 'Export to disk' - Specify output folder only. Result gives you separate geometry pieces.				* Additional specified directories willl be made if they're non existant.		* The 'Folder' field has no effect when using the 'Replace' option.		* Select objects by their node not the top node of a group.			To use:		- Make this script into a mel shelf button.		- Select poly objects and run script.		- Select a method...		  'Combine Selected' will export the geometry you have selected as one mesh.		  'Individually' will export each piece of geometry as individual objects.		- Select an operation...			'Replace' will swap out the geometry in the scene and not save to disk. (like v1)			'Export to disk' will save out the geometry to a directory.		* These methods are not undoable. Test the functionality first with temporary geometry.*/global proc objExp() {	if (`window -q -ex obj_window`) { deleteUI obj_window; }	objExpUI();		window -e -wh 400 145 obj_window;	showWindow obj_window;}global proc objExpUI() {		string $objInitFolder = (`workspace -q -rd` + "scenes");	window -t "OBJ Import / Export 2007               knurbs@gmail.com" -s 0 obj_window;		frameLayout -l "" -borderStyle "etchedIn" -mw 5 -mh 5;			columnLayout -adj 1;				radioButtonGrp -numberOfRadioButtons 2 -l "Import - Export method" -labelArray2 "Combine selected" "Individually" -sl 2 -on1 "objChangeText(1)" -on2 "objChangeText(2)" obj_optionCtrl;				textFieldButtonGrp -l "Folder"					-tx $objInitFolder					-bl "..."					-bc "objFolderBrowse()"					-cw 1 60 -cw 2 300					obj_folderCtrl;				button -l "Replace" -c "objExpProcess(1)";				button -l "Export to disk" -c "objExpProcess(2)";			setParent ..;		setParent ..;}global proc objChangeText(int $objChange) {	// 1 = combine	// 2 = individual	if ($objChange == 1) {		textFieldButtonGrp -e -tx (`workspace -q -sn` + "/scenes/exportedObj.obj") obj_folderCtrl;	} else {		textFieldButtonGrp -e -tx (`workspace -q -sn` + "/scenes/") obj_folderCtrl;	}}global proc objExpProcess(int $objOpt) {	global string $objNamelist[];		clear $objNamelist;		// directory to temporarily store mesh...	string $objExpTempDir = `internalVar -utd`;	// load ObjExport plugin if nessacary...	if (!`pluginInfo -query -l objExport`) {		loadPlugin objExport;		pluginInfo -edit -autoload true objExport;	}		// replace...	if ($objOpt == 1) {		// replace selected as one mesh...		if (`radioButtonGrp -q -sl obj_optionCtrl` == 1) {			file -op "groups=0;ptgroups=0;materials=0;smoothing=0;normals=0" -typ "OBJexport" -pr -es ($objExpTempDir + "objExport");			delete;			file -import -type "OBJ" -rpr "objExport" -options "mo=1"  -pr ($objExpTempDir + "objExport.obj");			// delete the temporary obj file...				sysFile -del ($objExpTempDir + "/objExport.obj");		} else {				// replace each selected object individually...			string $objSel[] = `ls -sl`;			string $objItem;				select -cl;				for ($objItem in $objSel) {				select -r $objItem;				file -op "groups=0;ptgroups=0;materials=0;smoothing=0;normals=0" -typ "OBJexport" -pr -es ($objExpTempDir + $objItem);				delete;				file -import -type "OBJ" -rpr "objExport" -options "mo=1"  -pr ($objExpTempDir + "/" + $objItem + ".obj");				$objNamelist = `ls -tr "Mesh*"`;				int $objListSize = `size($objNamelist)`;								if (`size($objNamelist)` == 1) {					rename $objNamelist[0] $objItem;				} else {					rename $objNamelist[$objListSize-1] $objItem;				}				// delete the temporary obj file...					sysFile -del ($objExpTempDir + "/objExport.obj");			}		}	} else { // export to disk...		// as one..		if (`radioButtonGrp -q -sl obj_optionCtrl` == 1) {			string $objSel[] = `ls -sl`;			string $objFolder = `textFieldButtonGrp -q -tx obj_folderCtrl`;						$objFolder = toNativePath($objFolder);			// make directories			string $dirArray[], $objMakeDir;			tokenize  $objFolder "\\" $dirArray;						int $objDirSize = (`size($dirArray)` - 2);			int $objzz = 1;						$objMakeDir = $dirArray[0];						for ($objzz; $objzz <= $objDirSize; $objzz++) {				$objMakeDir = ($objMakeDir + "/" + $dirArray[$objzz]);			} 						sysFile -md $objMakeDir;			file -op "groups=0;ptgroups=0;materials=0;smoothing=0;normals=0" -chn 1 -sh 0 -exp 0 -con 0 -ch 0 -typ "OBJexport" -pr -es ($objMakeDir + "/" + $dirArray[`size($dirArray)`-1]);		} else {			// individually...			string $objSel[] = `ls -sl`;			string $objItem;			string $objFolder = `textFieldButtonGrp -q -tx obj_folderCtrl`;						sysFile -md $objFolder;						select -cl;				for ($objItem in $objSel) {				select -r $objItem;				string $objOutname = ($objFolder + "/" + $objItem + ".obj");				$objOutname = substituteAllString($objOutname, "|", "");							file -op "groups=0;ptgroups=0;materials=0;smoothing=0;normals=0" -chn 1 -sh 0 -exp 0 -con 0 -ch 0 -typ "OBJexport" -pr -es $objOutname;			}				}			}}global proc objFolderBrowse() {	fileBrowserDialog -m 4 -ds 1 -fc "objGetFolder" -ft "folder" -an "Select";}global proc string objGetFolder(string $objFolderName, string $objFileType) {	if ($objFolderName != "" && $objFileType == "directory") {		textFieldButtonGrp -e -tx $objFolderName obj_folderCtrl;		print $objFolderName;	}		return $objFolderName;}objExp();